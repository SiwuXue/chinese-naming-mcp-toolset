name: Notifications & Integrations

on:
  workflow_run:
    workflows:
      - "CI/CD Pipeline"
      - "Security Scanning"
      - "Performance Testing"
      - "Multi-Environment Deployment"
      - "Monitoring & Alerts"
      - "Backup & Recovery"
    types:
      - completed
      - requested
  issues:
    types:
      - opened
      - closed
      - reopened
      - labeled
  pull_request:
    types:
      - opened
      - closed
      - reopened
      - ready_for_review
      - review_requested
  release:
    types:
      - published
      - prereleased
  schedule:
    # 每日项目状态报告
    - cron: '0 9 * * 1-5'  # 工作日上午9点
    # 每周项目总结
    - cron: '0 18 * * 5'   # 周五下午6点
  workflow_dispatch:
    inputs:
      notification_type:
        description: 'Type of notification to send'
        required: true
        default: 'status'
        type: choice
        options:
          - 'status'
          - 'alert'
          - 'report'
          - 'announcement'
          - 'test'
      message:
        description: 'Custom message (for announcements)'
        required: false
        type: string
      channels:
        description: 'Notification channels'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'slack'
          - 'email'
          - 'webhook'
          - 'github'

env:
  PROJECT_NAME: 'Chinese Naming System'
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
  TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
  EMAIL_SMTP_HOST: ${{ secrets.EMAIL_SMTP_HOST }}
  EMAIL_SMTP_PORT: ${{ secrets.EMAIL_SMTP_PORT }}
  EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}

jobs:
  # 工作流状态通知
  workflow-notifications:
    name: Workflow Status Notifications
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    steps:
      - name: Analyze workflow result
        id: analyze
        run: |
          echo "📊 Analyzing workflow result..."
          
          WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
          WORKFLOW_STATUS="${{ github.event.workflow_run.conclusion }}"
          WORKFLOW_URL="${{ github.event.workflow_run.html_url }}"
          BRANCH="${{ github.event.workflow_run.head_branch }}"
          COMMIT="${{ github.event.workflow_run.head_sha }}"
          ACTOR="${{ github.event.workflow_run.actor.login }}"
          
          echo "workflow_name=$WORKFLOW_NAME" >> $GITHUB_OUTPUT
          echo "workflow_status=$WORKFLOW_STATUS" >> $GITHUB_OUTPUT
          echo "workflow_url=$WORKFLOW_URL" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "commit=${COMMIT:0:7}" >> $GITHUB_OUTPUT
          echo "actor=$ACTOR" >> $GITHUB_OUTPUT
          
          # 确定通知级别
          case "$WORKFLOW_STATUS" in
            "success")
              NOTIFICATION_LEVEL="info"
              EMOJI="✅"
              COLOR="good"
              ;;
            "failure")
              NOTIFICATION_LEVEL="error"
              EMOJI="❌"
              COLOR="danger"
              ;;
            "cancelled")
              NOTIFICATION_LEVEL="warning"
              EMOJI="⚠️"
              COLOR="warning"
              ;;
            *)
              NOTIFICATION_LEVEL="info"
              EMOJI="ℹ️"
              COLOR="#808080"
              ;;
          esac
          
          echo "notification_level=$NOTIFICATION_LEVEL" >> $GITHUB_OUTPUT
          echo "emoji=$EMOJI" >> $GITHUB_OUTPUT
          echo "color=$COLOR" >> $GITHUB_OUTPUT
          
          echo "Workflow: $WORKFLOW_NAME"
          echo "Status: $WORKFLOW_STATUS"
          echo "Notification Level: $NOTIFICATION_LEVEL"

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          echo "📱 Sending Slack notification..."
          
          WORKFLOW_NAME="${{ steps.analyze.outputs.workflow_name }}"
          STATUS="${{ steps.analyze.outputs.workflow_status }}"
          EMOJI="${{ steps.analyze.outputs.emoji }}"
          COLOR="${{ steps.analyze.outputs.color }}"
          
          # 创建 Slack 消息
          cat > slack_message.json << EOF
          {
            "username": "GitHub Actions",
            "icon_emoji": ":github:",
            "attachments": [
              {
                "color": "$COLOR",
                "title": "$EMOJI Workflow: $WORKFLOW_NAME",
                "title_link": "${{ steps.analyze.outputs.workflow_url }}",
                "fields": [
                  {
                    "title": "Status",
                    "value": "$STATUS",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ steps.analyze.outputs.branch }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ steps.analyze.outputs.commit }}",
                    "short": true
                  },
                  {
                    "title": "Actor",
                    "value": "${{ steps.analyze.outputs.actor }}",
                    "short": true
                  }
                ],
                "footer": "${{ env.PROJECT_NAME }}",
                "ts": $(date +%s)
              }
            ]
          }
          EOF
          
          # 发送到 Slack
          curl -X POST -H 'Content-type: application/json' \
            --data @slack_message.json \
            "${{ env.SLACK_WEBHOOK_URL }}" || echo "Failed to send Slack notification"
          
          echo "✅ Slack notification sent"

      - name: Send Discord notification
        if: env.DISCORD_WEBHOOK_URL != ''
        run: |
          echo "🎮 Sending Discord notification..."
          
          STATUS="${{ steps.analyze.outputs.workflow_status }}"
          EMOJI="${{ steps.analyze.outputs.emoji }}"
          
          # Discord 颜色代码
          case "${{ steps.analyze.outputs.color }}" in
            "good") DISCORD_COLOR=65280 ;;      # 绿色
            "danger") DISCORD_COLOR=16711680 ;; # 红色
            "warning") DISCORD_COLOR=16776960 ;; # 黄色
            *) DISCORD_COLOR=8421504 ;;         # 灰色
          esac
          
          cat > discord_message.json << EOF
          {
            "embeds": [
              {
                "title": "$EMOJI Workflow Completed",
                "description": "**${{ steps.analyze.outputs.workflow_name }}** has $STATUS",
                "color": $DISCORD_COLOR,
                "fields": [
                  {
                    "name": "Branch",
                    "value": "${{ steps.analyze.outputs.branch }}",
                    "inline": true
                  },
                  {
                    "name": "Commit",
                    "value": "${{ steps.analyze.outputs.commit }}",
                    "inline": true
                  },
                  {
                    "name": "Actor",
                    "value": "${{ steps.analyze.outputs.actor }}",
                    "inline": true
                  }
                ],
                "url": "${{ steps.analyze.outputs.workflow_url }}",
                "footer": {
                  "text": "${{ env.PROJECT_NAME }}"
                },
                "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
              }
            ]
          }
          EOF
          
          curl -X POST -H 'Content-type: application/json' \
            --data @discord_message.json \
            "${{ env.DISCORD_WEBHOOK_URL }}" || echo "Failed to send Discord notification"
          
          echo "✅ Discord notification sent"

  # Issue 和 PR 通知
  issue-pr-notifications:
    name: Issue & PR Notifications
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event_name == 'pull_request'
    steps:
      - name: Analyze event
        id: analyze
        run: |
          echo "🔍 Analyzing GitHub event..."
          
          EVENT_TYPE="${{ github.event_name }}"
          ACTION="${{ github.event.action }}"
          
          if [ "$EVENT_TYPE" = "issues" ]; then
            TITLE="${{ github.event.issue.title }}"
            URL="${{ github.event.issue.html_url }}"
            NUMBER="${{ github.event.issue.number }}"
            AUTHOR="${{ github.event.issue.user.login }}"
            TYPE="Issue"
          else
            TITLE="${{ github.event.pull_request.title }}"
            URL="${{ github.event.pull_request.html_url }}"
            NUMBER="${{ github.event.pull_request.number }}"
            AUTHOR="${{ github.event.pull_request.user.login }}"
            TYPE="Pull Request"
          fi
          
          echo "type=$TYPE" >> $GITHUB_OUTPUT
          echo "action=$ACTION" >> $GITHUB_OUTPUT
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "number=$NUMBER" >> $GITHUB_OUTPUT
          echo "author=$AUTHOR" >> $GITHUB_OUTPUT
          
          # 确定 emoji
          case "$ACTION" in
            "opened") EMOJI="🆕" ;;
            "closed") EMOJI="✅" ;;
            "reopened") EMOJI="🔄" ;;
            "ready_for_review") EMOJI="👀" ;;
            "review_requested") EMOJI="🔍" ;;
            *) EMOJI="ℹ️" ;;
          esac
          
          echo "emoji=$EMOJI" >> $GITHUB_OUTPUT
          
          echo "Event: $TYPE $ACTION"
          echo "Title: $TITLE"
          echo "Author: $AUTHOR"

      - name: Send issue/PR notification
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          echo "📢 Sending issue/PR notification..."
          
          TYPE="${{ steps.analyze.outputs.type }}"
          ACTION="${{ steps.analyze.outputs.action }}"
          EMOJI="${{ steps.analyze.outputs.emoji }}"
          
          cat > notification.json << EOF
          {
            "text": "$EMOJI $TYPE $ACTION: #${{ steps.analyze.outputs.number }} ${{ steps.analyze.outputs.title }}",
            "attachments": [
              {
                "color": "#36a64f",
                "fields": [
                  {
                    "title": "Author",
                    "value": "${{ steps.analyze.outputs.author }}",
                    "short": true
                  },
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  }
                ],
                "actions": [
                  {
                    "type": "button",
                    "text": "View $TYPE",
                    "url": "${{ steps.analyze.outputs.url }}"
                  }
                ]
              }
            ]
          }
          EOF
          
          curl -X POST -H 'Content-type: application/json' \
            --data @notification.json \
            "${{ env.SLACK_WEBHOOK_URL }}" || echo "Failed to send notification"

  # 发布通知
  release-notifications:
    name: Release Notifications
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Send release notification
        run: |
          echo "🚀 Sending release notification..."
          
          RELEASE_NAME="${{ github.event.release.name }}"
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          RELEASE_URL="${{ github.event.release.html_url }}"
          IS_PRERELEASE="${{ github.event.release.prerelease }}"
          
          if [ "$IS_PRERELEASE" = "true" ]; then
            EMOJI="🧪"
            TYPE="Pre-release"
          else
            EMOJI="🚀"
            TYPE="Release"
          fi
          
          if [ -n "${{ env.SLACK_WEBHOOK_URL }}" ]; then
            cat > release_notification.json << EOF
            {
              "text": "$EMOJI New $TYPE: $RELEASE_NAME",
              "attachments": [
                {
                  "color": "#36a64f",
                  "title": "$RELEASE_NAME ($RELEASE_TAG)",
                  "title_link": "$RELEASE_URL",
                  "text": "A new $TYPE has been published for ${{ env.PROJECT_NAME }}",
                  "fields": [
                    {
                      "title": "Version",
                      "value": "$RELEASE_TAG",
                      "short": true
                    },
                    {
                      "title": "Type",
                      "value": "$TYPE",
                      "short": true
                    }
                  ],
                  "footer": "${{ env.PROJECT_NAME }}",
                  "ts": $(date +%s)
                }
              ]
            }
            EOF
            
            curl -X POST -H 'Content-type: application/json' \
              --data @release_notification.json \
              "${{ env.SLACK_WEBHOOK_URL }}"
          fi
          
          echo "✅ Release notification sent"

  # 每日状态报告
  daily-status-report:
    name: Daily Status Report
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 9 * * 1-5'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate daily report
        run: |
          echo "📊 Generating daily status report..."
          
          # 获取今天的日期
          TODAY=$(date +%Y-%m-%d)
          YESTERDAY=$(date -d "1 day ago" +%Y-%m-%d)
          
          cat > daily-report.md << EOF
          # 📊 Daily Status Report - $TODAY
          
          ## 📈 Project Overview
          
          **Project:** ${{ env.PROJECT_NAME }}
          **Repository:** ${{ github.repository }}
          **Report Date:** $TODAY
          
          ## 🔄 Recent Activity (Last 24 Hours)
          
          ### Commits
          - **Total Commits:** $(git rev-list --count --since="$YESTERDAY" HEAD 2>/dev/null || echo "N/A")
          - **Active Contributors:** $(git shortlog --since="$YESTERDAY" -sn HEAD 2>/dev/null | wc -l || echo "N/A")
          
          ### Repository Stats
          - **Total Commits:** $(git rev-list --count HEAD 2>/dev/null || echo "N/A")
          - **Total Contributors:** $(git shortlog -sn HEAD 2>/dev/null | wc -l || echo "N/A")
          - **Current Branch:** ${{ github.ref_name }}
          - **Last Commit:** $(git log -1 --format="%h - %s" 2>/dev/null || echo "N/A")
          
          ## 📋 Action Items
          
          - [ ] Review open pull requests
          - [ ] Check CI/CD pipeline status
          - [ ] Monitor application performance
          - [ ] Update documentation if needed
          
          ## 🔗 Quick Links
          
          - [Repository](https://github.com/${{ github.repository }})
          - [Issues](https://github.com/${{ github.repository }}/issues)
          - [Pull Requests](https://github.com/${{ github.repository }}/pulls)
          - [Actions](https://github.com/${{ github.repository }}/actions)
          
          ---
          *Generated automatically by GitHub Actions*
          EOF
          
          echo "✅ Daily report generated"

      - name: Send daily report
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          echo "📤 Sending daily status report..."
          
          # 读取报告内容（前几行）
          REPORT_SUMMARY=$(head -20 daily-report.md | tail -10)
          
          cat > daily_report_slack.json << EOF
          {
            "text": "📊 Daily Status Report - $(date +%Y-%m-%d)",
            "attachments": [
              {
                "color": "#36a64f",
                "title": "${{ env.PROJECT_NAME }} - Daily Report",
                "text": "Daily status report for ${{ github.repository }}",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Current Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  }
                ],
                "actions": [
                  {
                    "type": "button",
                    "text": "View Repository",
                    "url": "https://github.com/${{ github.repository }}"
                  },
                  {
                    "type": "button",
                    "text": "View Actions",
                    "url": "https://github.com/${{ github.repository }}/actions"
                  }
                ],
                "footer": "GitHub Actions",
                "ts": $(date +%s)
              }
            ]
          }
          EOF
          
          curl -X POST -H 'Content-type: application/json' \
            --data @daily_report_slack.json \
            "${{ env.SLACK_WEBHOOK_URL }}"
          
          echo "✅ Daily report sent"

      - name: Upload daily report
        uses: actions/upload-artifact@v3
        with:
          name: daily-report-$(date +%Y%m%d)
          path: daily-report.md

  # 每周项目总结
  weekly-summary:
    name: Weekly Project Summary
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 18 * * 5'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate weekly summary
        run: |
          echo "📈 Generating weekly project summary..."
          
          WEEK_START=$(date -d "last monday" +%Y-%m-%d)
          WEEK_END=$(date +%Y-%m-%d)
          
          cat > weekly-summary.md << EOF
          # 📈 Weekly Project Summary
          
          **Week:** $WEEK_START to $WEEK_END
          **Project:** ${{ env.PROJECT_NAME }}
          **Repository:** ${{ github.repository }}
          
          ## 📊 This Week's Highlights
          
          ### Development Activity
          - **Commits This Week:** $(git rev-list --count --since="$WEEK_START" HEAD 2>/dev/null || echo "N/A")
          - **Files Changed:** $(git diff --name-only --since="$WEEK_START" HEAD 2>/dev/null | wc -l || echo "N/A")
          - **Active Contributors:** $(git shortlog --since="$WEEK_START" -sn HEAD 2>/dev/null | wc -l || echo "N/A")
          
          ### Top Contributors This Week
          \`\`\`
          $(git shortlog --since="$WEEK_START" -sn HEAD 2>/dev/null | head -5 || echo "No commits this week")
          \`\`\`
          
          ### Recent Commits
          \`\`\`
          $(git log --since="$WEEK_START" --oneline --max-count=10 2>/dev/null || echo "No commits this week")
          \`\`\`
          
          ## 🎯 Goals for Next Week
          
          - [ ] Continue development on key features
          - [ ] Review and merge pending pull requests
          - [ ] Update documentation
          - [ ] Performance optimizations
          - [ ] Security updates
          
          ## 📊 Project Health
          
          - **Build Status:** ✅ Passing
          - **Test Coverage:** 📊 Monitoring
          - **Security:** 🔒 Up to date
          - **Dependencies:** 📦 Current
          
          ## 🔗 Important Links
          
          - [Project Board](https://github.com/${{ github.repository }}/projects)
          - [Milestones](https://github.com/${{ github.repository }}/milestones)
          - [Releases](https://github.com/${{ github.repository }}/releases)
          - [Wiki](https://github.com/${{ github.repository }}/wiki)
          
          ---
          *Weekly summary generated automatically*
          EOF
          
          echo "✅ Weekly summary generated"

      - name: Send weekly summary
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          echo "📤 Sending weekly summary..."
          
          cat > weekly_summary_slack.json << EOF
          {
            "text": "📈 Weekly Project Summary - Week ending $(date +%Y-%m-%d)",
            "attachments": [
              {
                "color": "#2eb886",
                "title": "${{ env.PROJECT_NAME }} - Weekly Summary",
                "text": "Here's what happened this week in our project",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Week Ending",
                    "value": "$(date +%Y-%m-%d)",
                    "short": true
                  }
                ],
                "footer": "GitHub Actions - Weekly Report",
                "ts": $(date +%s)
              }
            ]
          }
          EOF
          
          curl -X POST -H 'Content-type: application/json' \
            --data @weekly_summary_slack.json \
            "${{ env.SLACK_WEBHOOK_URL }}"
          
          echo "✅ Weekly summary sent"

      - name: Upload weekly summary
        uses: actions/upload-artifact@v3
        with:
          name: weekly-summary-$(date +%Y%m%d)
          path: weekly-summary.md

  # 自定义通知
  custom-notifications:
    name: Custom Notifications
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Send custom notification
        run: |
          echo "📢 Sending custom notification..."
          
          NOTIFICATION_TYPE="${{ github.event.inputs.notification_type }}"
          MESSAGE="${{ github.event.inputs.message }}"
          CHANNELS="${{ github.event.inputs.channels }}"
          
          # 确定 emoji 和颜色
          case "$NOTIFICATION_TYPE" in
            "alert")
              EMOJI="🚨"
              COLOR="danger"
              ;;
            "announcement")
              EMOJI="📢"
              COLOR="#2eb886"
              ;;
            "report")
              EMOJI="📊"
              COLOR="#36a64f"
              ;;
            "test")
              EMOJI="🧪"
              COLOR="warning"
              ;;
            *)
              EMOJI="ℹ️"
              COLOR="#808080"
              ;;
          esac
          
          # 发送到 Slack
          if [ "$CHANNELS" = "all" ] || [ "$CHANNELS" = "slack" ]; then
            if [ -n "${{ env.SLACK_WEBHOOK_URL }}" ]; then
              cat > custom_notification.json << EOF
              {
                "text": "$EMOJI Custom Notification",
                "attachments": [
                  {
                    "color": "$COLOR",
                    "title": "$NOTIFICATION_TYPE Notification",
                    "text": "${MESSAGE:-No message provided}",
                    "fields": [
                      {
                        "title": "Sent by",
                        "value": "${{ github.actor }}",
                        "short": true
                      },
                      {
                        "title": "Repository",
                        "value": "${{ github.repository }}",
                        "short": true
                      }
                    ],
                    "footer": "${{ env.PROJECT_NAME }}",
                    "ts": $(date +%s)
                  }
                ]
              }
              EOF
              
              curl -X POST -H 'Content-type: application/json' \
                --data @custom_notification.json \
                "${{ env.SLACK_WEBHOOK_URL }}"
              
              echo "✅ Custom notification sent to Slack"
            fi
          fi
          
          echo "📝 Notification Type: $NOTIFICATION_TYPE"
          echo "📝 Message: ${MESSAGE:-No message provided}"
          echo "📝 Channels: $CHANNELS"

  # 通知总结
  notification-summary:
    name: Notification Summary
    runs-on: ubuntu-latest
    needs: [workflow-notifications, issue-pr-notifications, release-notifications, daily-status-report, weekly-summary, custom-notifications]
    if: always()
    steps:
      - name: Generate notification summary
        run: |
          echo "📋 Generating notification summary..."
          
          cat > notification-summary.md << EOF
          # 📢 Notification Summary
          
          **Timestamp:** $(date)
          **Trigger:** ${{ github.event_name }}
          **Repository:** ${{ github.repository }}
          
          ## 📊 Notification Jobs Status
          
          | Job | Status | Description |
          |-----|--------|-------------|
          | Workflow Notifications | ${{ needs.workflow-notifications.result || 'skipped' }} | Workflow completion notifications |
          | Issue/PR Notifications | ${{ needs.issue-pr-notifications.result || 'skipped' }} | Issue and pull request notifications |
          | Release Notifications | ${{ needs.release-notifications.result || 'skipped' }} | Release and pre-release notifications |
          | Daily Status Report | ${{ needs.daily-status-report.result || 'skipped' }} | Daily project status report |
          | Weekly Summary | ${{ needs.weekly-summary.result || 'skipped' }} | Weekly project summary |
          | Custom Notifications | ${{ needs.custom-notifications.result || 'skipped' }} | Manual custom notifications |
          
          ## 🔧 Notification Channels
          
          - **Slack:** ${{ env.SLACK_WEBHOOK_URL != '' && '✅ Configured' || '❌ Not configured' }}
          - **Discord:** ${{ env.DISCORD_WEBHOOK_URL != '' && '✅ Configured' || '❌ Not configured' }}
          - **Teams:** ${{ env.TEAMS_WEBHOOK_URL != '' && '✅ Configured' || '❌ Not configured' }}
          - **Email:** ${{ env.EMAIL_SMTP_HOST != '' && '✅ Configured' || '❌ Not configured' }}
          
          ## 📈 Notification Statistics
          
          - **Total Notifications Sent:** $(echo "${{ needs.workflow-notifications.result }},${{ needs.issue-pr-notifications.result }},${{ needs.release-notifications.result }},${{ needs.daily-status-report.result }},${{ needs.weekly-summary.result }},${{ needs.custom-notifications.result }}" | tr ',' '\n' | grep -c 'success' || echo "0")
          - **Failed Notifications:** $(echo "${{ needs.workflow-notifications.result }},${{ needs.issue-pr-notifications.result }},${{ needs.release-notifications.result }},${{ needs.daily-status-report.result }},${{ needs.weekly-summary.result }},${{ needs.custom-notifications.result }}" | tr ',' '\n' | grep -c 'failure' || echo "0")
          
          ## 🔗 Integration Status
          
          All notification integrations are working as expected. For any issues with notifications, please check:
          
          1. Webhook URLs are correctly configured in repository secrets
          2. Notification channels are accessible
          3. GitHub Actions has necessary permissions
          
          ---
          *Notification summary generated automatically*
          EOF
          
          echo "✅ Notification summary generated"

      - name: Upload notification summary
        uses: actions/upload-artifact@v3
        with:
          name: notification-summary-$(date +%Y%m%d-%H%M%S)
          path: notification-summary.md
        if: always()