name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 验证发布条件
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            if [[ $VERSION =~ -[a-zA-Z] ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
          echo "Is prerelease: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-alpha.1"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

  # 运行完整测试套件
  test:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Run integration tests
        run: npm run test:integration || echo "No integration tests available"

      - name: Run security audit
        run: npm audit --audit-level=moderate

  # 构建发布包
  build:
    name: Build Release Package
    runs-on: ubuntu-latest
    needs: [validate, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: |
          npm run build || echo "No build script available"
          npm pack

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: npm-package
          path: '*.tgz'

  # 构建和推送 Docker 镜像
  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate, test]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 发布到 NPM
  npm-publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.is_prerelease == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Update package version
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          npm version ${VERSION#v} --no-git-tag-version

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # 创建 GitHub Release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, docker]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: npm-package

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [[ -n "$PREV_TAG" ]]; then
            echo "## 🚀 What's Changed" > changelog.md
            echo "" >> changelog.md
            
            # 获取提交信息
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> changelog.md
            echo "" >> changelog.md
            echo "" >> changelog.md
            
            # 获取贡献者
            echo "## 👥 Contributors" >> changelog.md
            git log --pretty=format:"%an" $PREV_TAG..HEAD | sort | uniq | sed 's/^/- @/' >> changelog.md
            echo "" >> changelog.md
            
            # Docker 镜像信息
            echo "## 🐳 Docker Images" >> changelog.md
            echo "\`\`\`" >> changelog.md
            echo "docker pull ghcr.io/${{ github.repository }}:${VERSION#v}" >> changelog.md
            echo "docker pull ghcr.io/${{ github.repository }}:latest" >> changelog.md
            echo "\`\`\`" >> changelog.md
          else
            echo "## 🎉 Initial Release" > changelog.md
            echo "" >> changelog.md
            echo "This is the first release of Chinese Naming MCP Toolset!" >> changelog.md
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
          files: |
            *.tgz
            CHANGELOG.md
            README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 部署到生产环境
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, github-release]
    if: needs.validate.outputs.is_prerelease == 'false'
    environment:
      name: production
      url: https://chinese-naming.dev
    steps:
      - name: Deploy to production
        run: |
          echo "🚀 Deploying version ${{ needs.validate.outputs.version }} to production..."
          # 这里添加实际的生产部署脚本
          # 例如：kubectl apply, helm upgrade, 或调用部署 API

  # 更新文档
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate, github-release]
    if: needs.validate.outputs.is_prerelease == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate documentation
        run: |
          npm run docs:generate || echo "No docs generation script available"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
        if: success()

  # 通知发布完成
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate, github-release, deploy-production, update-docs]
    if: always()
    steps:
      - name: Notify success
        if: needs.github-release.result == 'success'
        run: |
          echo "🎉 Release ${{ needs.validate.outputs.version }} completed successfully!"
          # 发送成功通知到 Slack/钉钉/邮件等

      - name: Notify failure
        if: needs.github-release.result == 'failure'
        run: |
          echo "❌ Release ${{ needs.validate.outputs.version }} failed!"
          # 发送失败通知到 Slack/钉钉/邮件等