name: Monitoring & Alerts

on:
  schedule:
    # 每小时检查一次服务状态
    - cron: '0 * * * *'
    # 每天凌晨生成监控报告
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of monitoring check'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'health'
          - 'performance'
          - 'security'
          - 'dependencies'
          - 'resources'
      alert_level:
        description: 'Alert level threshold'
        required: false
        default: 'warning'
        type: choice
        options:
          - 'info'
          - 'warning'
          - 'error'
          - 'critical'

env:
  NODE_VERSION: '18'
  MONITORING_ENABLED: 'true'

jobs:
  # 健康检查
  health-check:
    name: Service Health Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'health' || github.event.inputs.check_type == null
    outputs:
      health_status: ${{ steps.health.outputs.status }}
      response_time: ${{ steps.health.outputs.response_time }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start application for health check
        run: |
          echo "🚀 Starting application for health check..."
          npm start &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          
          # 等待应用启动
          sleep 30
        timeout-minutes: 2

      - name: Perform health checks
        id: health
        run: |
          echo "🏥 Performing health checks..."
          
          HEALTH_STATUS="healthy"
          RESPONSE_TIME=0
          ISSUES=""
          
          # 检查应用是否响应
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "✅ Application is responding"
            
            # 测量响应时间
            RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:3000/health)
            echo "⏱️ Response time: ${RESPONSE_TIME}s"
            
            # 检查响应时间阈值
            if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
              HEALTH_STATUS="degraded"
              ISSUES="$ISSUES\n- Slow response time: ${RESPONSE_TIME}s"
            fi
          else
            echo "❌ Application is not responding"
            HEALTH_STATUS="unhealthy"
            ISSUES="$ISSUES\n- Application not responding"
          fi
          
          # 检查内存使用
          MEMORY_USAGE=$(ps -o pid,ppid,cmd,%mem,%cpu --sort=-%mem -e | grep node | head -1 | awk '{print $4}' || echo "0")
          if (( $(echo "$MEMORY_USAGE > 80" | bc -l) )); then
            HEALTH_STATUS="degraded"
            ISSUES="$ISSUES\n- High memory usage: ${MEMORY_USAGE}%"
          fi
          
          # 检查 CPU 使用
          CPU_USAGE=$(ps -o pid,ppid,cmd,%mem,%cpu --sort=-%cpu -e | grep node | head -1 | awk '{print $5}' || echo "0")
          if (( $(echo "$CPU_USAGE > 80" | bc -l) )); then
            HEALTH_STATUS="degraded"
            ISSUES="$ISSUES\n- High CPU usage: ${CPU_USAGE}%"
          fi
          
          echo "status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT
          
          echo "Health Status: $HEALTH_STATUS"

      - name: Stop application
        run: |
          if [ -n "$APP_PID" ]; then
            kill $APP_PID || true
          fi
        if: always()

      - name: Generate health report
        run: |
          echo "# 🏥 Health Check Report" > health-report.md
          echo "" >> health-report.md
          echo "**Check Time:** $(date)" >> health-report.md
          echo "**Status:** ${{ steps.health.outputs.status }}" >> health-report.md
          echo "**Response Time:** ${{ steps.health.outputs.response_time }}s" >> health-report.md
          echo "" >> health-report.md
          
          case "${{ steps.health.outputs.status }}" in
            "healthy")
              echo "✅ **All systems operational**" >> health-report.md
              ;;
            "degraded")
              echo "⚠️ **Service degraded**" >> health-report.md
              echo "" >> health-report.md
              echo "### Issues Detected" >> health-report.md
              echo -e "${{ steps.health.outputs.issues }}" >> health-report.md
              ;;
            "unhealthy")
              echo "❌ **Service unhealthy**" >> health-report.md
              echo "" >> health-report.md
              echo "### Critical Issues" >> health-report.md
              echo -e "${{ steps.health.outputs.issues }}" >> health-report.md
              ;;
          esac

      - name: Upload health report
        uses: actions/upload-artifact@v3
        with:
          name: health-report
          path: health-report.md

  # 性能监控
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'performance' || github.event.inputs.check_type == null
    outputs:
      performance_score: ${{ steps.perf.outputs.score }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install performance tools
        run: |
          npm install -g clinic
          npm install -g autocannon
          npm install -g 0x

      - name: Run performance tests
        id: perf
        run: |
          echo "⚡ Running performance tests..."
          
          # 启动应用进行性能测试
          npm start &
          APP_PID=$!
          sleep 30
          
          PERFORMANCE_SCORE=100
          ISSUES=""
          
          # 负载测试
          echo "🔥 Running load test..."
          autocannon -c 10 -d 30 http://localhost:3000 > load-test.txt || true
          
          if [ -f "load-test.txt" ]; then
            # 提取性能指标
            REQUESTS_PER_SEC=$(grep "Req/Sec" load-test.txt | awk '{print $2}' | head -1 || echo "0")
            LATENCY_AVG=$(grep "Latency" load-test.txt | awk '{print $2}' | head -1 || echo "0")
            
            echo "📊 Requests/sec: $REQUESTS_PER_SEC"
            echo "📊 Average latency: $LATENCY_AVG"
            
            # 性能评分
            if (( $(echo "$REQUESTS_PER_SEC < 100" | bc -l) )); then
              PERFORMANCE_SCORE=$((PERFORMANCE_SCORE - 30))
              ISSUES="$ISSUES\n- Low throughput: $REQUESTS_PER_SEC req/sec"
            fi
            
            # 检查延迟（假设单位是ms）
            LATENCY_NUM=$(echo $LATENCY_AVG | sed 's/ms//')
            if (( $(echo "$LATENCY_NUM > 1000" | bc -l) )); then
              PERFORMANCE_SCORE=$((PERFORMANCE_SCORE - 20))
              ISSUES="$ISSUES\n- High latency: $LATENCY_AVG"
            fi
          fi
          
          # 停止应用
          kill $APP_PID || true
          
          echo "score=$PERFORMANCE_SCORE" >> $GITHUB_OUTPUT
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT
          
          echo "Performance Score: $PERFORMANCE_SCORE/100"

      - name: Generate performance report
        run: |
          echo "# ⚡ Performance Monitoring Report" > performance-report.md
          echo "" >> performance-report.md
          echo "**Test Time:** $(date)" >> performance-report.md
          echo "**Performance Score:** ${{ steps.perf.outputs.score }}/100" >> performance-report.md
          echo "" >> performance-report.md
          
          if [ -f "load-test.txt" ]; then
            echo "## 📊 Load Test Results" >> performance-report.md
            echo "" >> performance-report.md
            echo "\`\`\`" >> performance-report.md
            head -20 load-test.txt >> performance-report.md
            echo "\`\`\`" >> performance-report.md
            echo "" >> performance-report.md
          fi
          
          if [ -n "${{ steps.perf.outputs.issues }}" ]; then
            echo "## ⚠️ Performance Issues" >> performance-report.md
            echo "" >> performance-report.md
            echo -e "${{ steps.perf.outputs.issues }}" >> performance-report.md
            echo "" >> performance-report.md
          fi
          
          echo "## 🎯 Performance Targets" >> performance-report.md
          echo "" >> performance-report.md
          echo "- **Throughput:** >100 req/sec" >> performance-report.md
          echo "- **Latency:** <1000ms" >> performance-report.md
          echo "- **CPU Usage:** <80%" >> performance-report.md
          echo "- **Memory Usage:** <80%" >> performance-report.md

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: |
            performance-report.md
            load-test.txt
        if: always()

  # 安全监控
  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'security' || github.event.inputs.check_type == null
    outputs:
      security_score: ${{ steps.security.outputs.score }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security checks
        id: security
        run: |
          echo "🔒 Running security monitoring..."
          
          SECURITY_SCORE=100
          VULNERABILITIES=0
          ISSUES=""
          
          # npm audit
          echo "🔍 Running npm audit..."
          npm audit --json > audit-report.json || true
          
          if [ -f "audit-report.json" ]; then
            VULNERABILITIES=$(jq '.metadata.vulnerabilities.total // 0' audit-report.json)
            
            if [ "$VULNERABILITIES" -gt 0 ]; then
              CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' audit-report.json)
              HIGH=$(jq '.metadata.vulnerabilities.high // 0' audit-report.json)
              MODERATE=$(jq '.metadata.vulnerabilities.moderate // 0' audit-report.json)
              LOW=$(jq '.metadata.vulnerabilities.low // 0' audit-report.json)
              
              # 根据严重程度扣分
              SECURITY_SCORE=$((SECURITY_SCORE - CRITICAL * 25 - HIGH * 15 - MODERATE * 10 - LOW * 5))
              
              ISSUES="$ISSUES\n- Critical vulnerabilities: $CRITICAL"
              ISSUES="$ISSUES\n- High vulnerabilities: $HIGH"
              ISSUES="$ISSUES\n- Moderate vulnerabilities: $MODERATE"
              ISSUES="$ISSUES\n- Low vulnerabilities: $LOW"
            fi
          fi
          
          # 检查敏感文件
          echo "🔍 Checking for sensitive files..."
          SENSITIVE_FILES=0
          
          # 检查常见的敏感文件模式
          for pattern in "*.key" "*.pem" "*.p12" "*.pfx" ".env" "config.json"; do
            if find . -name "$pattern" -not -path "./node_modules/*" | grep -q .; then
              SENSITIVE_FILES=$((SENSITIVE_FILES + 1))
              ISSUES="$ISSUES\n- Sensitive file pattern found: $pattern"
            fi
          done
          
          if [ "$SENSITIVE_FILES" -gt 0 ]; then
            SECURITY_SCORE=$((SECURITY_SCORE - SENSITIVE_FILES * 10))
          fi
          
          # 检查硬编码密钥
          echo "🔍 Checking for hardcoded secrets..."
          SECRET_PATTERNS=0
          
          # 简单的密钥模式检查
          if grep -r "password\s*=" src/ 2>/dev/null | grep -v "//" | grep -q .; then
            SECRET_PATTERNS=$((SECRET_PATTERNS + 1))
            ISSUES="$ISSUES\n- Potential hardcoded password found"
          fi
          
          if grep -r "api[_-]key" src/ 2>/dev/null | grep -v "//" | grep -q .; then
            SECRET_PATTERNS=$((SECRET_PATTERNS + 1))
            ISSUES="$ISSUES\n- Potential hardcoded API key found"
          fi
          
          if [ "$SECRET_PATTERNS" -gt 0 ]; then
            SECURITY_SCORE=$((SECURITY_SCORE - SECRET_PATTERNS * 15))
          fi
          
          # 确保分数不为负
          if [ "$SECURITY_SCORE" -lt 0 ]; then
            SECURITY_SCORE=0
          fi
          
          echo "score=$SECURITY_SCORE" >> $GITHUB_OUTPUT
          echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT
          
          echo "Security Score: $SECURITY_SCORE/100"
          echo "Total Vulnerabilities: $VULNERABILITIES"

      - name: Generate security report
        run: |
          echo "# 🔒 Security Monitoring Report" > security-report.md
          echo "" >> security-report.md
          echo "**Scan Time:** $(date)" >> security-report.md
          echo "**Security Score:** ${{ steps.security.outputs.score }}/100" >> security-report.md
          echo "**Vulnerabilities:** ${{ steps.security.outputs.vulnerabilities }}" >> security-report.md
          echo "" >> security-report.md
          
          if [ "${{ steps.security.outputs.score }}" -ge 80 ]; then
            echo "✅ **Security status: Good**" >> security-report.md
          elif [ "${{ steps.security.outputs.score }}" -ge 60 ]; then
            echo "⚠️ **Security status: Needs attention**" >> security-report.md
          else
            echo "❌ **Security status: Critical**" >> security-report.md
          fi
          
          echo "" >> security-report.md
          
          if [ -n "${{ steps.security.outputs.issues }}" ]; then
            echo "## 🚨 Security Issues" >> security-report.md
            echo "" >> security-report.md
            echo -e "${{ steps.security.outputs.issues }}" >> security-report.md
            echo "" >> security-report.md
          fi
          
          if [ -f "audit-report.json" ]; then
            echo "## 📊 Vulnerability Details" >> security-report.md
            echo "" >> security-report.md
            
            # 提取漏洞详情
            if [ "${{ steps.security.outputs.vulnerabilities }}" -gt 0 ]; then
              echo "### High Priority Vulnerabilities" >> security-report.md
              echo "" >> security-report.md
              
              # 这里可以添加更详细的漏洞信息提取
              echo "See npm audit report for detailed vulnerability information." >> security-report.md
            else
              echo "✅ No vulnerabilities found in dependencies." >> security-report.md
            fi
          fi
          
          echo "" >> security-report.md
          echo "## 🛡️ Security Recommendations" >> security-report.md
          echo "" >> security-report.md
          echo "- Keep dependencies up to date" >> security-report.md
          echo "- Use environment variables for secrets" >> security-report.md
          echo "- Implement proper input validation" >> security-report.md
          echo "- Enable security headers" >> security-report.md
          echo "- Regular security audits" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: |
            security-report.md
            audit-report.json
        if: always()

  # 资源监控
  resource-monitoring:
    name: Resource Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'resources' || github.event.inputs.check_type == null
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Monitor system resources
        run: |
          echo "📊 Monitoring system resources..."
          
          # 系统信息
          echo "## System Information" > resource-report.md
          echo "" >> resource-report.md
          echo "- **OS:** $(uname -s)" >> resource-report.md
          echo "- **Kernel:** $(uname -r)" >> resource-report.md
          echo "- **Architecture:** $(uname -m)" >> resource-report.md
          echo "" >> resource-report.md
          
          # CPU 信息
          echo "## CPU Information" >> resource-report.md
          echo "" >> resource-report.md
          echo "- **Cores:** $(nproc)" >> resource-report.md
          echo "- **Load Average:** $(uptime | awk -F'load average:' '{print $2}')" >> resource-report.md
          echo "" >> resource-report.md
          
          # 内存信息
          echo "## Memory Information" >> resource-report.md
          echo "" >> resource-report.md
          
          TOTAL_MEM=$(free -h | awk '/^Mem:/ {print $2}')
          USED_MEM=$(free -h | awk '/^Mem:/ {print $3}')
          FREE_MEM=$(free -h | awk '/^Mem:/ {print $4}')
          
          echo "- **Total Memory:** $TOTAL_MEM" >> resource-report.md
          echo "- **Used Memory:** $USED_MEM" >> resource-report.md
          echo "- **Free Memory:** $FREE_MEM" >> resource-report.md
          echo "" >> resource-report.md
          
          # 磁盘信息
          echo "## Disk Information" >> resource-report.md
          echo "" >> resource-report.md
          echo "\`\`\`" >> resource-report.md
          df -h >> resource-report.md
          echo "\`\`\`" >> resource-report.md
          echo "" >> resource-report.md
          
          # 网络信息
          echo "## Network Information" >> resource-report.md
          echo "" >> resource-report.md
          
          # 检查网络连接
          if ping -c 1 google.com > /dev/null 2>&1; then
            echo "- **Internet Connectivity:** ✅ Available" >> resource-report.md
          else
            echo "- **Internet Connectivity:** ❌ Not available" >> resource-report.md
          fi
          
          # DNS 解析测试
          if nslookup google.com > /dev/null 2>&1; then
            echo "- **DNS Resolution:** ✅ Working" >> resource-report.md
          else
            echo "- **DNS Resolution:** ❌ Failed" >> resource-report.md
          fi

      - name: Check project resources
        run: |
          echo "📁 Checking project resources..."
          
          echo "" >> resource-report.md
          echo "## Project Resources" >> resource-report.md
          echo "" >> resource-report.md
          
          # 项目大小
          PROJECT_SIZE=$(du -sh . | awk '{print $1}')
          echo "- **Project Size:** $PROJECT_SIZE" >> resource-report.md
          
          # node_modules 大小
          if [ -d "node_modules" ]; then
            NODE_MODULES_SIZE=$(du -sh node_modules | awk '{print $1}')
            echo "- **node_modules Size:** $NODE_MODULES_SIZE" >> resource-report.md
          fi
          
          # 文件统计
          JS_FILES=$(find src -name "*.js" | wc -l)
          TEST_FILES=$(find test -name "*.js" 2>/dev/null | wc -l || echo "0")
          
          echo "- **JavaScript Files:** $JS_FILES" >> resource-report.md
          echo "- **Test Files:** $TEST_FILES" >> resource-report.md
          
          # 代码行数
          if [ "$JS_FILES" -gt 0 ]; then
            TOTAL_LINES=$(find src -name "*.js" -exec wc -l {} + | tail -1 | awk '{print $1}')
            echo "- **Total Lines of Code:** $TOTAL_LINES" >> resource-report.md
          fi

      - name: Upload resource report
        uses: actions/upload-artifact@v3
        with:
          name: resource-report
          path: resource-report.md

  # 告警处理
  alert-handler:
    name: Alert Handler
    runs-on: ubuntu-latest
    needs: [health-check, performance-monitoring, security-monitoring]
    if: always()
    steps:
      - name: Evaluate alert conditions
        id: alerts
        run: |
          echo "🚨 Evaluating alert conditions..."
          
          ALERT_LEVEL="info"
          ALERTS=""
          
          # 健康检查告警
          HEALTH_STATUS="${{ needs.health-check.outputs.health_status }}"
          if [ "$HEALTH_STATUS" = "unhealthy" ]; then
            ALERT_LEVEL="critical"
            ALERTS="$ALERTS\n🚨 CRITICAL: Service is unhealthy"
          elif [ "$HEALTH_STATUS" = "degraded" ]; then
            ALERT_LEVEL="warning"
            ALERTS="$ALERTS\n⚠️ WARNING: Service performance degraded"
          fi
          
          # 性能告警
          PERF_SCORE="${{ needs.performance-monitoring.outputs.performance_score }}"
          if [ -n "$PERF_SCORE" ] && [ "$PERF_SCORE" -lt 60 ]; then
            if [ "$ALERT_LEVEL" != "critical" ]; then
              ALERT_LEVEL="warning"
            fi
            ALERTS="$ALERTS\n⚠️ WARNING: Low performance score: $PERF_SCORE/100"
          fi
          
          # 安全告警
          SECURITY_SCORE="${{ needs.security-monitoring.outputs.security_score }}"
          if [ -n "$SECURITY_SCORE" ] && [ "$SECURITY_SCORE" -lt 70 ]; then
            ALERT_LEVEL="critical"
            ALERTS="$ALERTS\n🚨 CRITICAL: Low security score: $SECURITY_SCORE/100"
          fi
          
          echo "alert_level=$ALERT_LEVEL" >> $GITHUB_OUTPUT
          echo "alerts=$ALERTS" >> $GITHUB_OUTPUT
          
          echo "Alert Level: $ALERT_LEVEL"

      - name: Send alerts
        if: steps.alerts.outputs.alert_level != 'info'
        run: |
          echo "📢 Sending alerts..."
          
          # 这里可以集成实际的告警系统
          # 例如：Slack, Discord, Email, PagerDuty 等
          
          echo "Alert Level: ${{ steps.alerts.outputs.alert_level }}"
          echo -e "Alerts:${{ steps.alerts.outputs.alerts }}"
          
          # 示例：创建 GitHub Issue
          if [ "${{ steps.alerts.outputs.alert_level }}" = "critical" ]; then
            echo "Would create critical alert issue"
          fi

      - name: Generate monitoring summary
        run: |
          echo "# 📊 Monitoring Summary" > monitoring-summary.md
          echo "" >> monitoring-summary.md
          echo "**Monitoring Time:** $(date)" >> monitoring-summary.md
          echo "**Alert Level:** ${{ steps.alerts.outputs.alert_level }}" >> monitoring-summary.md
          echo "" >> monitoring-summary.md
          
          echo "## 📈 System Status" >> monitoring-summary.md
          echo "" >> monitoring-summary.md
          echo "| Component | Status | Score |" >> monitoring-summary.md
          echo "|-----------|--------|-------|" >> monitoring-summary.md
          echo "| Health | ${{ needs.health-check.outputs.health_status }} | - |" >> monitoring-summary.md
          echo "| Performance | - | ${{ needs.performance-monitoring.outputs.performance_score }}/100 |" >> monitoring-summary.md
          echo "| Security | - | ${{ needs.security-monitoring.outputs.security_score }}/100 |" >> monitoring-summary.md
          echo "" >> monitoring-summary.md
          
          if [ -n "${{ steps.alerts.outputs.alerts }}" ]; then
            echo "## 🚨 Active Alerts" >> monitoring-summary.md
            echo "" >> monitoring-summary.md
            echo -e "${{ steps.alerts.outputs.alerts }}" >> monitoring-summary.md
            echo "" >> monitoring-summary.md
          fi
          
          echo "## 📋 Recommendations" >> monitoring-summary.md
          echo "" >> monitoring-summary.md
          
          case "${{ steps.alerts.outputs.alert_level }}" in
            "critical")
              echo "- 🚨 Immediate action required" >> monitoring-summary.md
              echo "- Check service logs and restart if necessary" >> monitoring-summary.md
              echo "- Investigate security vulnerabilities" >> monitoring-summary.md
              ;;
            "warning")
              echo "- ⚠️ Monitor closely and plan improvements" >> monitoring-summary.md
              echo "- Consider performance optimizations" >> monitoring-summary.md
              echo "- Schedule maintenance window" >> monitoring-summary.md
              ;;
            "info")
              echo "- ✅ All systems operating normally" >> monitoring-summary.md
              echo "- Continue regular monitoring" >> monitoring-summary.md
              ;;
          esac

      - name: Upload monitoring summary
        uses: actions/upload-artifact@v3
        with:
          name: monitoring-summary
          path: monitoring-summary.md
        if: always()