name: Dependency Updates

on:
  schedule:
    # 每周一凌晨 4 点检查依赖更新
    - cron: '0 4 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates to check'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'security'
          - 'minor'
          - 'patch'
      auto_merge:
        description: 'Auto-merge safe updates'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  # 检查过期依赖
  check-outdated:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      security_updates: ${{ steps.check.outputs.security_updates }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check for outdated packages
        id: check
        run: |
          echo "🔍 Checking for outdated dependencies..."
          
          # 检查过期的包
          npm outdated --json > outdated.json || true
          
          # 检查安全漏洞
          npm audit --json > audit.json || true
          
          # 分析结果
          HAS_UPDATES="false"
          SECURITY_UPDATES="false"
          
          if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
            HAS_UPDATES="true"
            echo "📦 Found outdated packages"
          fi
          
          if [ -s audit.json ]; then
            VULNERABILITIES=$(jq '.metadata.vulnerabilities.total // 0' audit.json)
            if [ "$VULNERABILITIES" -gt 0 ]; then
              SECURITY_UPDATES="true"
              echo "🚨 Found $VULNERABILITIES security vulnerabilities"
            fi
          fi
          
          echo "has_updates=$HAS_UPDATES" >> $GITHUB_OUTPUT
          echo "security_updates=$SECURITY_UPDATES" >> $GITHUB_OUTPUT
          
          echo "Has updates: $HAS_UPDATES"
          echo "Security updates: $SECURITY_UPDATES"

      - name: Generate dependency report
        run: |
          echo "# 📦 Dependency Status Report" > dependency-report.md
          echo "" >> dependency-report.md
          echo "**Check Date:** $(date)" >> dependency-report.md
          echo "**Repository:** ${{ github.repository }}" >> dependency-report.md
          echo "" >> dependency-report.md
          
          if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
            echo "## 📊 Outdated Packages" >> dependency-report.md
            echo "" >> dependency-report.md
            echo "| Package | Current | Wanted | Latest | Type |" >> dependency-report.md
            echo "|---------|---------|--------|--------|------|" >> dependency-report.md
            
            jq -r 'to_entries[] | "| \(.key) | \(.value.current) | \(.value.wanted) | \(.value.latest) | \(.value.type) |"' outdated.json >> dependency-report.md
            echo "" >> dependency-report.md
          else
            echo "✅ All dependencies are up to date!" >> dependency-report.md
            echo "" >> dependency-report.md
          fi
          
          if [ -s audit.json ]; then
            VULNERABILITIES=$(jq '.metadata.vulnerabilities.total // 0' audit.json)
            if [ "$VULNERABILITIES" -gt 0 ]; then
              echo "## 🚨 Security Vulnerabilities" >> dependency-report.md
              echo "" >> dependency-report.md
              echo "**Total Vulnerabilities:** $VULNERABILITIES" >> dependency-report.md
              echo "" >> dependency-report.md
              
              # 按严重程度分类
              CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' audit.json)
              HIGH=$(jq '.metadata.vulnerabilities.high // 0' audit.json)
              MODERATE=$(jq '.metadata.vulnerabilities.moderate // 0' audit.json)
              LOW=$(jq '.metadata.vulnerabilities.low // 0' audit.json)
              
              echo "- **Critical:** $CRITICAL" >> dependency-report.md
              echo "- **High:** $HIGH" >> dependency-report.md
              echo "- **Moderate:** $MODERATE" >> dependency-report.md
              echo "- **Low:** $LOW" >> dependency-report.md
              echo "" >> dependency-report.md
            else
              echo "✅ No security vulnerabilities found!" >> dependency-report.md
              echo "" >> dependency-report.md
            fi
          fi

      - name: Upload dependency report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-report
          path: |
            dependency-report.md
            outdated.json
            audit.json

  # 安全更新
  security-updates:
    name: Apply Security Updates
    runs-on: ubuntu-latest
    needs: check-outdated
    if: needs.check-outdated.outputs.security_updates == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Apply security fixes
        run: |
          echo "🔒 Applying security fixes..."
          
          # 自动修复安全漏洞
          npm audit fix --force || true
          
          # 检查是否有变化
          if git diff --quiet package*.json; then
            echo "No security fixes applied"
            exit 0
          fi
          
          echo "Security fixes applied successfully"

      - name: Run tests after security updates
        run: |
          npm ci
          npm test || echo "Tests failed after security updates"

      - name: Create security update PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'fix(security): apply security updates'
          title: '🔒 Security Updates'
          body: |
            ## 🔒 Automated Security Updates
            
            This PR contains automated security fixes for vulnerable dependencies.
            
            ### Changes
            - Applied `npm audit fix --force`
            - Updated vulnerable packages to secure versions
            
            ### Testing
            - [x] Automated tests passed
            - [ ] Manual testing required
            
            ### Review Checklist
            - [ ] Verify all security vulnerabilities are resolved
            - [ ] Check for any breaking changes
            - [ ] Ensure application functionality is intact
            
            **Auto-generated by GitHub Actions**
          branch: security-updates
          delete-branch: true
          labels: |
            security
            dependencies
            automated

  # 依赖更新
  dependency-updates:
    name: Update Dependencies
    runs-on: ubuntu-latest
    needs: check-outdated
    if: needs.check-outdated.outputs.has_updates == 'true'
    strategy:
      matrix:
        update_type: [patch, minor]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Update ${{ matrix.update_type }} dependencies
        run: |
          echo "📦 Updating ${{ matrix.update_type }} dependencies..."
          
          case "${{ matrix.update_type }}" in
            "patch")
              ncu -u --target patch
              ;;
            "minor")
              ncu -u --target minor
              ;;
          esac
          
          # 检查是否有变化
          if git diff --quiet package.json; then
            echo "No ${{ matrix.update_type }} updates available"
            exit 0
          fi
          
          echo "${{ matrix.update_type }} updates applied"

      - name: Install updated dependencies
        run: |
          npm install
          npm audit fix || true

      - name: Run tests
        run: |
          npm test
        continue-on-error: true

      - name: Run linting
        run: |
          npm run lint
        continue-on-error: true

      - name: Generate update summary
        run: |
          echo "# 📦 ${{ matrix.update_type }} Dependency Updates" > update-summary.md
          echo "" >> update-summary.md
          echo "This PR updates ${{ matrix.update_type }} dependencies to their latest versions." >> update-summary.md
          echo "" >> update-summary.md
          
          echo "## 📊 Updated Packages" >> update-summary.md
          echo "" >> update-summary.md
          
          # 显示变化的包
          git diff --name-only package.json package-lock.json | while read file; do
            echo "- $file" >> update-summary.md
          done
          
          echo "" >> update-summary.md
          echo "## 🧪 Test Results" >> update-summary.md
          echo "" >> update-summary.md
          echo "- [x] Dependencies installed successfully" >> update-summary.md
          echo "- [x] Automated tests executed" >> update-summary.md
          echo "- [x] Code linting performed" >> update-summary.md
          echo "" >> update-summary.md
          
          echo "## 📋 Review Checklist" >> update-summary.md
          echo "" >> update-summary.md
          echo "- [ ] Review updated dependencies" >> update-summary.md
          echo "- [ ] Check for breaking changes" >> update-summary.md
          echo "- [ ] Verify application functionality" >> update-summary.md
          echo "- [ ] Update documentation if needed" >> update-summary.md

      - name: Create dependency update PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(deps): update ${{ matrix.update_type }} dependencies'
          title: '📦 Update ${{ matrix.update_type }} Dependencies'
          body-path: update-summary.md
          branch: update-${{ matrix.update_type }}-dependencies
          delete-branch: true
          labels: |
            dependencies
            ${{ matrix.update_type }}
            automated

  # 主要版本更新检查
  major-updates:
    name: Check Major Updates
    runs-on: ubuntu-latest
    needs: check-outdated
    if: needs.check-outdated.outputs.has_updates == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Check major updates
        run: |
          echo "🚀 Checking for major version updates..."
          
          ncu --target major --format group > major-updates.txt || true
          
          if [ -s major-updates.txt ]; then
            echo "📋 Major updates available:"
            cat major-updates.txt
          else
            echo "✅ No major updates available"
          fi

      - name: Generate major update report
        run: |
          echo "# 🚀 Major Version Updates Available" > major-update-report.md
          echo "" >> major-update-report.md
          echo "**Check Date:** $(date)" >> major-update-report.md
          echo "" >> major-update-report.md
          
          if [ -s major-updates.txt ]; then
            echo "## 📦 Available Major Updates" >> major-update-report.md
            echo "" >> major-update-report.md
            echo "\`\`\`" >> major-update-report.md
            cat major-updates.txt >> major-update-report.md
            echo "\`\`\`" >> major-update-report.md
            echo "" >> major-update-report.md
            
            echo "## ⚠️ Important Notes" >> major-update-report.md
            echo "" >> major-update-report.md
            echo "Major version updates may contain breaking changes. Please:" >> major-update-report.md
            echo "" >> major-update-report.md
            echo "1. Review the changelog for each package" >> major-update-report.md
            echo "2. Check for breaking changes" >> major-update-report.md
            echo "3. Update your code accordingly" >> major-update-report.md
            echo "4. Test thoroughly before merging" >> major-update-report.md
            echo "" >> major-update-report.md
            
            echo "## 🔗 Useful Links" >> major-update-report.md
            echo "" >> major-update-report.md
            echo "- [npm-check-updates](https://github.com/raineorshine/npm-check-updates)" >> major-update-report.md
            echo "- [Semantic Versioning](https://semver.org/)" >> major-update-report.md
          else
            echo "✅ No major updates available at this time." >> major-update-report.md
          fi

      - name: Create issue for major updates
        if: hashFiles('major-updates.txt') != ''
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('major-update-report.md', 'utf8');
            
            // 检查是否已存在类似的 issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'dependencies,major-updates'
            });
            
            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚀 Major Dependency Updates Available',
                body: report,
                labels: ['dependencies', 'major-updates', 'enhancement']
              });
            } else {
              console.log('Major updates issue already exists');
            }

      - name: Upload major update report
        uses: actions/upload-artifact@v3
        with:
          name: major-update-report
          path: |
            major-update-report.md
            major-updates.txt
        if: always()

  # 依赖分析
  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install analysis tools
        run: |
          npm install -g depcheck
          npm install -g license-checker
          npm install -g bundlesize

      - name: Check for unused dependencies
        run: |
          echo "🔍 Checking for unused dependencies..."
          depcheck --json > depcheck-report.json || true

      - name: Analyze bundle size
        run: |
          echo "📦 Analyzing bundle size..."
          npm run build || echo "No build script available"
          
          # 如果有 bundlesize 配置，运行检查
          if grep -q "bundlesize" package.json; then
            bundlesize || true
          fi

      - name: Check licenses
        run: |
          echo "📄 Checking dependency licenses..."
          license-checker --json --out licenses.json

      - name: Generate analysis report
        run: |
          echo "# 🔬 Dependency Analysis Report" > analysis-report.md
          echo "" >> analysis-report.md
          echo "**Analysis Date:** $(date)" >> analysis-report.md
          echo "" >> analysis-report.md
          
          # 未使用的依赖
          if [ -f "depcheck-report.json" ]; then
            UNUSED_DEPS=$(jq '.dependencies | length' depcheck-report.json)
            UNUSED_DEV_DEPS=$(jq '.devDependencies | length' depcheck-report.json)
            
            echo "## 📦 Dependency Usage" >> analysis-report.md
            echo "" >> analysis-report.md
            echo "- **Unused Dependencies:** $UNUSED_DEPS" >> analysis-report.md
            echo "- **Unused Dev Dependencies:** $UNUSED_DEV_DEPS" >> analysis-report.md
            echo "" >> analysis-report.md
            
            if [ "$UNUSED_DEPS" -gt 0 ]; then
              echo "### Unused Dependencies" >> analysis-report.md
              jq -r '.dependencies[]' depcheck-report.json | sed 's/^/- /' >> analysis-report.md
              echo "" >> analysis-report.md
            fi
          fi
          
          # 许可证信息
          if [ -f "licenses.json" ]; then
            echo "## 📄 License Summary" >> analysis-report.md
            echo "" >> analysis-report.md
            
            # 统计许可证类型
            jq -r 'to_entries[] | .value.licenses' licenses.json | sort | uniq -c | sort -nr > license-summary.txt
            
            echo "| License | Count |" >> analysis-report.md
            echo "|---------|-------|" >> analysis-report.md
            
            while read count license; do
              echo "| $license | $count |" >> analysis-report.md
            done < license-summary.txt
            
            echo "" >> analysis-report.md
          fi
          
          echo "## 💡 Recommendations" >> analysis-report.md
          echo "" >> analysis-report.md
          echo "- Remove unused dependencies to reduce bundle size" >> analysis-report.md
          echo "- Review license compatibility" >> analysis-report.md
          echo "- Consider alternatives for large dependencies" >> analysis-report.md
          echo "- Keep dependencies up to date for security" >> analysis-report.md

      - name: Upload analysis results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-analysis
          path: |
            analysis-report.md
            depcheck-report.json
            licenses.json
            license-summary.txt
        if: always()

  # 汇总报告
  summary:
    name: Dependency Update Summary
    runs-on: ubuntu-latest
    needs: [check-outdated, security-updates, dependency-updates, major-updates, dependency-analysis]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate summary report
        run: |
          echo "# 📋 Dependency Update Summary" > summary-report.md
          echo "" >> summary-report.md
          echo "**Update Date:** $(date)" >> summary-report.md
          echo "**Repository:** ${{ github.repository }}" >> summary-report.md
          echo "" >> summary-report.md
          
          echo "## 🎯 Actions Taken" >> summary-report.md
          echo "" >> summary-report.md
          echo "- **Security Updates:** ${{ needs.security-updates.result }}" >> summary-report.md
          echo "- **Dependency Updates:** ${{ needs.dependency-updates.result }}" >> summary-report.md
          echo "- **Major Update Check:** ${{ needs.major-updates.result }}" >> summary-report.md
          echo "- **Dependency Analysis:** ${{ needs.dependency-analysis.result }}" >> summary-report.md
          echo "" >> summary-report.md
          
          echo "## 📊 Status" >> summary-report.md
          echo "" >> summary-report.md
          echo "- **Has Updates:** ${{ needs.check-outdated.outputs.has_updates }}" >> summary-report.md
          echo "- **Security Updates:** ${{ needs.check-outdated.outputs.security_updates }}" >> summary-report.md
          echo "" >> summary-report.md
          
          echo "## 🔗 Detailed Reports" >> summary-report.md
          echo "" >> summary-report.md
          echo "All detailed reports are available in the workflow artifacts." >> summary-report.md

      - name: Upload summary report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-summary
          path: summary-report.md