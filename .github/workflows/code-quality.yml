name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨 2 点运行代码质量检查
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of quality check to run'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'lint'
          - 'format'
          - 'complexity'
          - 'coverage'
          - 'duplication'

env:
  NODE_VERSION: '18'

jobs:
  # 代码风格检查
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'lint' || github.event.inputs.check_type == 'format' || github.event.inputs.check_type == null
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          echo "🔍 Running ESLint..."
          npm run lint -- --format json --output-file eslint-report.json || true
          npm run lint || echo "ESLint found issues"

      - name: Run Prettier check
        run: |
          echo "💅 Checking code formatting..."
          npm run format:check || echo "Formatting issues found"

      - name: Generate lint report
        run: |
          echo "# 🔍 Lint and Format Report" > lint-report.md
          echo "" >> lint-report.md
          echo "**Check Date:** $(date)" >> lint-report.md
          echo "" >> lint-report.md
          
          if [ -f "eslint-report.json" ]; then
            TOTAL_ERRORS=$(jq '[.[].errorCount] | add // 0' eslint-report.json)
            TOTAL_WARNINGS=$(jq '[.[].warningCount] | add // 0' eslint-report.json)
            
            echo "## 📊 ESLint Results" >> lint-report.md
            echo "" >> lint-report.md
            echo "- **Errors:** $TOTAL_ERRORS" >> lint-report.md
            echo "- **Warnings:** $TOTAL_WARNINGS" >> lint-report.md
            echo "" >> lint-report.md
            
            if [ "$TOTAL_ERRORS" -gt 0 ] || [ "$TOTAL_WARNINGS" -gt 0 ]; then
              echo "### Issues by File" >> lint-report.md
              echo "" >> lint-report.md
              echo "| File | Errors | Warnings |" >> lint-report.md
              echo "|------|--------|----------|" >> lint-report.md
              
              jq -r '.[] | select(.errorCount > 0 or .warningCount > 0) | "| \(.filePath | split("/") | last) | \(.errorCount) | \(.warningCount) |"' eslint-report.json >> lint-report.md
            fi
          fi
          
          echo "" >> lint-report.md
          echo "## 💅 Prettier Check" >> lint-report.md
          echo "" >> lint-report.md
          
          # 检查格式化状态
          if npm run format:check > /dev/null 2>&1; then
            echo "✅ All files are properly formatted" >> lint-report.md
          else
            echo "❌ Some files need formatting" >> lint-report.md
            echo "" >> lint-report.md
            echo "Run \`npm run format\` to fix formatting issues." >> lint-report.md
          fi

      - name: Upload lint results
        uses: actions/upload-artifact@v3
        with:
          name: lint-results
          path: |
            lint-report.md
            eslint-report.json
        if: always()

  # 代码复杂度分析
  complexity-analysis:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'complexity' || github.event.inputs.check_type == null
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install complexity analysis tools
        run: |
          npm install -g complexity-report
          npm install -g jscpd

      - name: Run complexity analysis
        run: |
          echo "🧮 Analyzing code complexity..."
          
          # 创建复杂度报告
          find src -name "*.js" -o -name "*.ts" | head -20 | while read file; do
            echo "Analyzing: $file"
            cr "$file" --format json >> complexity-raw.json 2>/dev/null || true
          done
          
          # 如果没有生成报告，创建空报告
          if [ ! -f "complexity-raw.json" ]; then
            echo "[]" > complexity-raw.json
          fi

      - name: Run duplication analysis
        run: |
          echo "🔍 Analyzing code duplication..."
          jscpd src --reporters json --output ./jscpd-report || true

      - name: Generate complexity report
        run: |
          echo "# 🧮 Code Complexity Report" > complexity-report.md
          echo "" >> complexity-report.md
          echo "**Analysis Date:** $(date)" >> complexity-report.md
          echo "" >> complexity-report.md
          
          echo "## 📊 Complexity Metrics" >> complexity-report.md
          echo "" >> complexity-report.md
          
          # 分析复杂度数据
          if [ -f "complexity-raw.json" ] && [ -s "complexity-raw.json" ]; then
            echo "### High Complexity Functions" >> complexity-report.md
            echo "" >> complexity-report.md
            echo "Functions with cyclomatic complexity > 10:" >> complexity-report.md
            echo "" >> complexity-report.md
            echo "| Function | File | Complexity |" >> complexity-report.md
            echo "|----------|------|------------|" >> complexity-report.md
            
            # 这里需要根据实际的复杂度工具输出格式调整
            echo "| - | - | - |" >> complexity-report.md
          else
            echo "No complexity data available." >> complexity-report.md
          fi
          
          echo "" >> complexity-report.md
          echo "## 🔍 Code Duplication" >> complexity-report.md
          echo "" >> complexity-report.md
          
          if [ -f "jscpd-report/jscpd-report.json" ]; then
            DUPLICATES=$(jq '.statistics.total.duplicates // 0' jscpd-report/jscpd-report.json)
            PERCENTAGE=$(jq '.statistics.total.percentage // 0' jscpd-report/jscpd-report.json)
            
            echo "- **Total Duplicates:** $DUPLICATES" >> complexity-report.md
            echo "- **Duplication Percentage:** $PERCENTAGE%" >> complexity-report.md
            
            if [ "$DUPLICATES" -gt 0 ]; then
              echo "" >> complexity-report.md
              echo "### Duplicate Code Blocks" >> complexity-report.md
              echo "" >> complexity-report.md
              echo "Review the detailed report for specific duplicate code blocks." >> complexity-report.md
            fi
          else
            echo "No duplication analysis available." >> complexity-report.md
          fi
          
          echo "" >> complexity-report.md
          echo "## 💡 Recommendations" >> complexity-report.md
          echo "" >> complexity-report.md
          echo "- Refactor functions with high cyclomatic complexity" >> complexity-report.md
          echo "- Extract common code to reduce duplication" >> complexity-report.md
          echo "- Consider breaking down large functions" >> complexity-report.md
          echo "- Add unit tests for complex functions" >> complexity-report.md

      - name: Upload complexity results
        uses: actions/upload-artifact@v3
        with:
          name: complexity-results
          path: |
            complexity-report.md
            complexity-raw.json
            jscpd-report/
        if: always()

  # 测试覆盖率分析
  coverage-analysis:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'coverage' || github.event.inputs.check_type == null
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: |
          echo "🧪 Running tests with coverage..."
          npm run test:coverage || npm test -- --coverage || echo "Coverage collection failed"

      - name: Generate coverage report
        run: |
          echo "# 📊 Test Coverage Report" > coverage-report.md
          echo "" >> coverage-report.md
          echo "**Coverage Date:** $(date)" >> coverage-report.md
          echo "" >> coverage-report.md
          
          if [ -f "coverage/coverage-summary.json" ]; then
            LINES=$(jq '.total.lines.pct' coverage/coverage-summary.json)
            FUNCTIONS=$(jq '.total.functions.pct' coverage/coverage-summary.json)
            BRANCHES=$(jq '.total.branches.pct' coverage/coverage-summary.json)
            STATEMENTS=$(jq '.total.statements.pct' coverage/coverage-summary.json)
            
            echo "## 📈 Overall Coverage" >> coverage-report.md
            echo "" >> coverage-report.md
            echo "| Metric | Coverage |" >> coverage-report.md
            echo "|--------|----------|" >> coverage-report.md
            echo "| Lines | $LINES% |" >> coverage-report.md
            echo "| Functions | $FUNCTIONS% |" >> coverage-report.md
            echo "| Branches | $BRANCHES% |" >> coverage-report.md
            echo "| Statements | $STATEMENTS% |" >> coverage-report.md
            echo "" >> coverage-report.md
            
            # 覆盖率状态
            if (( $(echo "$LINES >= 80" | bc -l) )); then
              echo "✅ **Good coverage** (≥80%)" >> coverage-report.md
            elif (( $(echo "$LINES >= 60" | bc -l) )); then
              echo "⚠️ **Moderate coverage** (60-79%)" >> coverage-report.md
            else
              echo "❌ **Low coverage** (<60%)" >> coverage-report.md
            fi
            
            echo "" >> coverage-report.md
            echo "## 📁 File Coverage" >> coverage-report.md
            echo "" >> coverage-report.md
            echo "| File | Lines | Functions | Branches |" >> coverage-report.md
            echo "|------|-------|-----------|----------|" >> coverage-report.md
            
            # 显示文件级别的覆盖率
            jq -r 'to_entries[] | select(.key != "total") | "| \(.key | split("/") | last) | \(.value.lines.pct)% | \(.value.functions.pct)% | \(.value.branches.pct)% |"' coverage/coverage-summary.json >> coverage-report.md
          else
            echo "❌ No coverage data available." >> coverage-report.md
            echo "" >> coverage-report.md
            echo "Make sure to run tests with coverage enabled." >> coverage-report.md
          fi
          
          echo "" >> coverage-report.md
          echo "## 🎯 Coverage Goals" >> coverage-report.md
          echo "" >> coverage-report.md
          echo "- **Target:** 80% overall coverage" >> coverage-report.md
          echo "- **Minimum:** 60% for new code" >> coverage-report.md
          echo "- **Critical paths:** 90% coverage" >> coverage-report.md

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        if: hashFiles('coverage/lcov.info') != ''

      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        with:
          name: coverage-results
          path: |
            coverage-report.md
            coverage/
        if: always()

  # 代码质量门禁
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-and-format, complexity-analysis, coverage-analysis]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Evaluate quality metrics
        id: quality-check
        run: |
          echo "🚪 Evaluating quality gate..."
          
          QUALITY_SCORE=100
          ISSUES=""
          
          # 检查 ESLint 错误
          if [ -f "lint-results/eslint-report.json" ]; then
            ERRORS=$(jq '[.[].errorCount] | add // 0' lint-results/eslint-report.json)
            if [ "$ERRORS" -gt 0 ]; then
              QUALITY_SCORE=$((QUALITY_SCORE - ERRORS * 5))
              ISSUES="$ISSUES\n- ESLint errors: $ERRORS"
            fi
          fi
          
          # 检查测试覆盖率
          if [ -f "coverage-results/coverage/coverage-summary.json" ]; then
            COVERAGE=$(jq '.total.lines.pct' coverage-results/coverage/coverage-summary.json)
            if (( $(echo "$COVERAGE < 60" | bc -l) )); then
              QUALITY_SCORE=$((QUALITY_SCORE - 30))
              ISSUES="$ISSUES\n- Low test coverage: $COVERAGE%"
            elif (( $(echo "$COVERAGE < 80" | bc -l) )); then
              QUALITY_SCORE=$((QUALITY_SCORE - 10))
              ISSUES="$ISSUES\n- Moderate test coverage: $COVERAGE%"
            fi
          fi
          
          # 检查代码重复
          if [ -f "complexity-results/jscpd-report/jscpd-report.json" ]; then
            DUPLICATION=$(jq '.statistics.total.percentage // 0' complexity-results/jscpd-report/jscpd-report.json)
            if (( $(echo "$DUPLICATION > 10" | bc -l) )); then
              QUALITY_SCORE=$((QUALITY_SCORE - 20))
              ISSUES="$ISSUES\n- High code duplication: $DUPLICATION%"
            fi
          fi
          
          echo "quality_score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT
          
          if [ "$QUALITY_SCORE" -ge 80 ]; then
            echo "gate_status=passed" >> $GITHUB_OUTPUT
          else
            echo "gate_status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Generate quality gate report
        run: |
          echo "# 🚪 Quality Gate Report" > quality-gate-report.md
          echo "" >> quality-gate-report.md
          echo "**Evaluation Date:** $(date)" >> quality-gate-report.md
          echo "**Quality Score:** ${{ steps.quality-check.outputs.quality_score }}/100" >> quality-gate-report.md
          echo "**Status:** ${{ steps.quality-check.outputs.gate_status }}" >> quality-gate-report.md
          echo "" >> quality-gate-report.md
          
          if [ "${{ steps.quality-check.outputs.gate_status }}" = "passed" ]; then
            echo "✅ **Quality gate PASSED**" >> quality-gate-report.md
            echo "" >> quality-gate-report.md
            echo "Your code meets the quality standards!" >> quality-gate-report.md
          else
            echo "❌ **Quality gate FAILED**" >> quality-gate-report.md
            echo "" >> quality-gate-report.md
            echo "## 🔍 Issues Found" >> quality-gate-report.md
            echo "" >> quality-gate-report.md
            echo -e "${{ steps.quality-check.outputs.issues }}" >> quality-gate-report.md
            echo "" >> quality-gate-report.md
            echo "## 🛠️ Recommended Actions" >> quality-gate-report.md
            echo "" >> quality-gate-report.md
            echo "1. Fix ESLint errors and warnings" >> quality-gate-report.md
            echo "2. Increase test coverage to at least 80%" >> quality-gate-report.md
            echo "3. Reduce code duplication" >> quality-gate-report.md
            echo "4. Refactor complex functions" >> quality-gate-report.md
          fi
          
          echo "" >> quality-gate-report.md
          echo "## 📊 Quality Metrics" >> quality-gate-report.md
          echo "" >> quality-gate-report.md
          echo "| Metric | Target | Status |" >> quality-gate-report.md
          echo "|--------|--------|--------|" >> quality-gate-report.md
          echo "| ESLint Errors | 0 | - |" >> quality-gate-report.md
          echo "| Test Coverage | ≥80% | - |" >> quality-gate-report.md
          echo "| Code Duplication | <10% | - |" >> quality-gate-report.md
          echo "| Complexity | Low | - |" >> quality-gate-report.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-gate-report.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Fail if quality gate failed
        if: steps.quality-check.outputs.gate_status == 'failed'
        run: |
          echo "❌ Quality gate failed with score: ${{ steps.quality-check.outputs.quality_score }}/100"
          exit 1

      - name: Upload quality gate results
        uses: actions/upload-artifact@v3
        with:
          name: quality-gate-results
          path: quality-gate-report.md
        if: always()

  # 代码质量趋势分析
  quality-trends:
    name: Quality Trends
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'schedule')
    needs: [quality-gate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate quality trends
        run: |
          echo "📈 Generating quality trends..."
          
          # 创建趋势数据
          echo "# 📈 Code Quality Trends" > quality-trends.md
          echo "" >> quality-trends.md
          echo "**Generated:** $(date)" >> quality-trends.md
          echo "" >> quality-trends.md
          
          # 获取最近的提交
          echo "## 📊 Recent Quality Metrics" >> quality-trends.md
          echo "" >> quality-trends.md
          echo "| Date | Commit | Coverage | Issues |" >> quality-trends.md
          echo "|------|--------|----------|--------|" >> quality-trends.md
          
          # 这里可以添加更复杂的趋势分析逻辑
          git log --oneline -10 | while read commit; do
            COMMIT_HASH=$(echo $commit | cut -d' ' -f1)
            COMMIT_DATE=$(git show -s --format=%ci $COMMIT_HASH | cut -d' ' -f1)
            echo "| $COMMIT_DATE | $COMMIT_HASH | - | - |" >> quality-trends.md
          done
          
          echo "" >> quality-trends.md
          echo "## 🎯 Quality Goals" >> quality-trends.md
          echo "" >> quality-trends.md
          echo "- Maintain >80% test coverage" >> quality-trends.md
          echo "- Keep ESLint errors at 0" >> quality-trends.md
          echo "- Reduce code duplication below 5%" >> quality-trends.md
          echo "- Improve code complexity scores" >> quality-trends.md

      - name: Upload trends report
        uses: actions/upload-artifact@v3
        with:
          name: quality-trends
          path: quality-trends.md